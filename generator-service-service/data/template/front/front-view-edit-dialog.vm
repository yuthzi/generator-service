##定义初始变量
#set($entityName = $tableInfo.name)
#set($comment = $!{tableInfo.comment})
##
##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end
#set($pkName = $!{pk.name})
##
<!-- 编辑${comment} -->
<template>
  <el-dialog
    v-model="dialogVisible"
    :title="dialogProps.title"
    :destroy-on-close="true"
    width="580px"
  >
    <el-form
      ref="ruleFormRef"
      label-width="100px"
      label-suffix=" :"
      :rules="rules"
      :model="formData"
    >
    #foreach($column in $tableInfo.otherColumn)
      #if (!($column.name.startsWith("$timeKey")) && !($column.name.equals("$tenantIdKey")))
     <el-form-item label="$tool.getFieldDesc($column.comment)" prop="$column.name">
        #if($tool.isEnum($column.comment))
	        <el-select
	          v-model="${column.name}Value"
	          placeholder="请填写$tool.getFieldDesc($column.comment)"
	          @change="handle$tool.firstUpperCase($column.name)Change"
	        >
	          <el-option
	            v-for="item in ${column.name}Options"
	            :key="item.value"
	            :label="item.label"
	            :value="item.value"
	          />
	        </el-select>
        #else
	        <el-input
	          v-model="formData!.$column.name"
	          placeholder="请填写$tool.getFieldDesc($column.comment)"
	          clearable
	        ></el-input>
        #end
       </el-form-item>
      #end
    #end
    </el-form>
    <template #footer>
      <el-button @click="dialogVisible = false">取消</el-button>
      <el-button type="primary" @click="handleSubmit" :loading="loading">
        确定
      </el-button>
    </template>
  </el-dialog>
</template>

<script setup lang="ts" name="${entityName}EditDialog">
import { ref, reactive } from 'vue'
import { ElMessage, FormInstance } from 'element-plus'
import type { $entityName } from '@/api/${tableInfo.entityFolder}/type'

interface DialogProps {
  title: string
  rowData?: ${entityName}.Res${entityName}List
  api?: (params: any) => Promise<any>
  getTableList?: () => Promise<any>
}

## 枚举的值
#foreach($column in $tableInfo.otherColumn)
  #if($tool.isEnum($column.comment))
const ${column.name}Options = [
    #foreach($v in $tool.parseValue($column.comment))
  {
    value: $v.key,
    label: '$v.value',
  },
    #end
]
  #end
#end

## 枚举元素引用
#foreach($column in $tableInfo.otherColumn)
  #if($tool.isEnum($column.comment))
const ${column.name}Value = ref()
  #end
#end

let formData = ref<${entityName}.Res${entityName}List>()

const rules = reactive({
#foreach($column in $tableInfo.otherColumn)
    #if (!($column.name.startsWith("$timeKey")) && !($column.name.equals("$tenantIdKey")))
     $column.name: [{ required: true, message: '请填写$tool.getFieldDesc($column.comment)' }],
    #end
#end
})

const dialogVisible = ref(false)
const loading = ref<boolean>(false)
// props定义
// title 需要给个默认值，否则ts会提示为空值
const dialogProps = ref<DialogProps>({ title: '' })
// 接收父组件参数
const acceptParams = (params: DialogProps): void => {
  dialogProps.value = params
  dialogVisible.value = true
  formData.value = params.rowData
  
  ## 初始化下拉框  
#foreach($column in $tableInfo.otherColumn)
  #if($tool.isEnum($column.comment))
  // 初始化${column.name}
  const ${column.name} = ${column.name}Options.find((e) => e.value == formData.value!.${column.name})
  ${column.name}Value.value = ${column.name} === undefined ? '' : ${column.name}
 
  #end
#end
}

## 下拉框值改变事件响应
#foreach($column in $tableInfo.otherColumn)
  #if($tool.isEnum($column.comment))
const handle$tool.firstUpperCase($column.name)Change = () => {
  formData!.value!.${column.name} = ${column.name}Value.value
}

  #end
#end

const ruleFormRef = ref<FormInstance>()
const handleSubmit = () => {
  ruleFormRef.value!.validate(async (valid) => {
    if (!valid) return
    try {
      loading.value = true
      await dialogProps.value.api!(formData.value)
      ElMessage.success({ message: `${dialogProps.value.title}${comment}成功！` })
      dialogProps.value.getTableList!()
      dialogVisible.value = false
      loading.value = false
    } catch (error) {
      loading.value = false
      console.log(error)
    }
  })
}

// 暴露给父组件的方法
defineExpose({
  acceptParams,
})
</script>

<style lang="scss" scoped></style>
